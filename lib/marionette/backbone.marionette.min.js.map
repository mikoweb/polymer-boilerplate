{"version":3,"sources":["src/common/trigger-method.js","src/common/monitor-view-events.js","src/common/bind-events.js","src/common/bind-requests.js","src/mixins/behaviors.js","src/utils/get-unique-event-name.js","src/config/features.js","src/mixins/triggers.js","src/config/dom.js","src/common/view.js","src/common/build-region.js","src/utils/proxy.js","src/utils/extend.js","src/utils/deprecate.js","src/common/is-node-attached.js","src/common/merge-options.js","src/common/get-option.js","src/common/normalize-methods.js","src/error.js","src/utils/set-options.js","src/mixins/common.js","src/mixins/radio.js","src/object.js","src/template-cache.js","src/utils/invoke.js","src/mixins/delegate-entity-events.js","src/mixins/ui.js","src/mixins/view.js","src/region.js","src/mixins/regions.js","src/config/renderer.js","src/view.js","src/behavior.js","src/backbone.marionette.js","src/config/behaviors-lookup.js"],"names":["getEventName","match","prefix","eventName","toUpperCase","triggerMethod","event","args","Array","_len","_key","arguments","methodName","getOnMethodName","method","getOption","call","this","result","_","isFunction","apply","trigger","triggerMethodOn","context","_len2","_key2","triggerMethodChildren","view","shouldTrigger","_getImmediateChildren","each","child","shouldTriggerAttach","_isAttached","shouldAttach","shouldTriggerDetach","shouldDetach","triggerDOMRefresh","_isRendered","triggerDOMRemove","handleBeforeAttach","handleAttach","handleBeforeDetach","handleDetach","handleBeforeRender","handleRender","monitorViewEvents","_areViewEventsMonitored","on","bindFromStrings","target","entity","evt","methods","actionName","methodNames","split","MarionetteError","iterateEvents","bindings","isObject","isString","bindEvents","unbindEvents","iterateReplies","channel","normalizedRadioRequests","normalizeMethods","bindRequests","unbindRequests","getBehaviorClass","options","key","behaviorClass","Marionette","Behaviors","behaviorsLookup","parseBehaviors","behaviors","chain","map","BehaviorClass","behavior","nestedBehaviors","concat","flatten","value","uniqueName","selector","uniqueId","isEnabled","name","FEATURES","buildViewTrigger","triggerDef","shouldPreventDefault","preventDefault","shouldStopPropagation","stopPropagation","getEl","el","Backbone","$","setDomApi","mixin","prototype","Dom","extend","renderView","supportsRenderLifecycle","render","destroyView","destroy","supportsDestroyLifecycle","_shouldDisableEvents","remove","_isDestroyed","buildRegionFromDefinition","definition","defaults","opts","buildRegionFromObject","regionClass","RegionClass","omit","proxy","Model","deprecate","message","test","prev","next","url","DEV_MODE","undefined","_cache","_warn","_console","console","warn","log","noop","isNodeAttached","document","documentElement","contains","parentNode","mergeOptions","keys","option","optionName","hash","reduce","normalizedHash","_this","splitter","memoize","replace","errorProps","Error","error","pick","captureStackTrace","urlRoot","CommonMixin","RadioMixin","channelName","Radio","_channel","radioEvents","radioRequests","_destroyRadio","stopReplying","ClassOptions","MarionetteObject","hasOwnProperty","_setOptions","_setCid","_initRadio","initialize","Events","cid","cidPrefix","stopListening","TemplateCache","templateId","cachedTemplate","templateCaches","load","i","length","compiledTemplate","template","loadTemplate","compileTemplate","$template","html","rawTemplate","_invoke","invokeMap","invoke","BehaviorsMixin","_behaviors","_getBehaviors","triggers","memo","_triggers","events","_events","without","DelegateEntityEventsMixin","model","collection","_undelegateEntityEvents","modelEvents","collectionEvents","delegateEventSplitter","getUniqueEventName","TriggersMixin","normalizeUIKeys","ui","val","normalizeUIString","uiString","r","slice","normalizeUIValues","properties","isArray","property","propertyVal","UIMixin","uiBindings","_getUIBindings","_uiBindings","_ui","$el","_this2","DomApi","createDocumentFragment","find","childEl","detach","newEl","oldEl","parent","replaceChild","el1","el2","parent1","parent2","next1","nextSibling","next2","insertBefore","contents","_$el","_ref$_$el","_$contents","_ref$_$contents","append","hasChildNodes","ViewMixin","eventsArg","_proxyBehaviorViewProperties","_buildEventProxies","viewEvents","_getEvents","combinedEvents","_getBehaviorEvents","_getBehaviorTriggers","getTriggers","View","delegateEvents","_getViewTriggers","_delegateEntityEvents","_delegateBehaviorEntityEvents","_undelegateBehaviorEntityEvents","unbindUIElements","_removeElement","_removeChildren","_destroyBehaviors","off","removeData","detachEl","_bindUIElements","_bindBehaviorUIElements","_unbindUIElements","_unbindBehaviorUIElements","_getUI","ret","_triggerEventOnBehaviors","_childViewEvents","_childViewTriggers","listenTo","_childViewEventHandler","childViewEvents","childViewTriggers","childEventName","Region","_initEl","_ensureElement","_getView","currentView","_isSwappingView","empty","_setupChildView","_attachView","_proxyChildViewEvents","_empty","parentView","_parentView","_shouldDisableMonitoring","shouldReplaceEl","replaceElement","_replaceEl","attachHtml","allowMissingEl","viewOptions","_getViewOptions","findEl","_restoreEl","replaceEl","_isReplaced","_detachView","appendContents","detachHtml","shouldDestroy","preventDestroy","removeView","_stopChildViewEvents","shouldRestoreEl","detachContents","reset","_name","_removeReferences","buildRegion","RegionsMixin","regions","_regions","addRegions","isEmpty","_addRegions","regionDefinitions","partial","_addRegion","region","_removeRegion","_getRegions","bind","getRegions","getRegion","clone","show","detachView","Renderer","data","get","_initBehaviors","_initRegions","constructor","delegateEntityEvents","serializeModel","serializeCollection","attributes","hasEl","setElement","hasContents","bindUIElements","_reInitRegions","_renderTemplate","getTemplate","mixinTemplateContext","serializeData","_renderHtml","attachElContent","templateContext","setContents","removeRegions","compact","renderer","Behavior","_removeBehavior","behaviorEvents","behaviorHandler","behaviorTriggers","previousMarionette","noConflict","setEnabled","state","Object","VERSION"],"mappings":"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","file":"backbone.marionette.min.js","sourcesContent":["// Trigger Method\n// --------------\n\nimport _ from 'underscore';\nimport getOption from './get-option';\n\n// split the event name on the \":\"\nconst splitter = /(^|:)(\\w)/gi;\n\n// take the event section (\"section1:section2:section3\")\n// and turn it in to uppercase name onSection1Section2Section3\nfunction getEventName(match, prefix, eventName) {\n  return eventName.toUpperCase();\n}\n\nconst getOnMethodName = _.memoize(function(event) {\n  return 'on' + event.replace(splitter, getEventName);\n});\n\n// Trigger an event and/or a corresponding method name. Examples:\n//\n// `this.triggerMethod(\"foo\")` will trigger the \"foo\" event and\n// call the \"onFoo\" method.\n//\n// `this.triggerMethod(\"foo:bar\")` will trigger the \"foo:bar\" event and\n// call the \"onFooBar\" method.\nexport function triggerMethod(event, ...args) {\n  // get the method name from the event name\n  const methodName = getOnMethodName(event);\n  const method = getOption.call(this, methodName);\n  let result;\n\n  // call the onMethodName if it exists\n  if (_.isFunction(method)) {\n    // pass all args, except the event name\n    result = method.apply(this, args);\n  }\n\n  // trigger the event\n  this.trigger.apply(this, arguments);\n\n  return result;\n}\n\n// triggerMethodOn invokes triggerMethod on a specific context\n//\n// e.g. `Marionette.triggerMethodOn(view, 'show')`\n// will trigger a \"show\" event or invoke onShow the view.\nexport function triggerMethodOn(context, ...args) {\n  if (_.isFunction(context.triggerMethod)) {\n    return context.triggerMethod.apply(context, args);\n  }\n\n  return triggerMethod.apply(context, args);\n}\n","// DOM Refresh\n// -----------\n\nimport _ from 'underscore';\nimport { triggerMethodOn } from './trigger-method';\n\n// Trigger method on children unless a pure Backbone.View\nfunction triggerMethodChildren(view, event, shouldTrigger) {\n  if (!view._getImmediateChildren) { return; }\n  _.each(view._getImmediateChildren(), child => {\n    if (!shouldTrigger(child)) { return; }\n    triggerMethodOn(child, event, child);\n  });\n}\n\nfunction shouldTriggerAttach(view) {\n  return !view._isAttached;\n}\n\nfunction shouldAttach(view) {\n  if (!shouldTriggerAttach(view)) { return false; }\n  view._isAttached = true;\n  return true;\n}\n\nfunction shouldTriggerDetach(view) {\n  return view._isAttached;\n}\n\nfunction shouldDetach(view) {\n  if (!shouldTriggerDetach(view)) { return false; }\n  view._isAttached = false;\n  return true;\n}\n\nfunction triggerDOMRefresh(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:refresh', view);\n  }\n}\n\nfunction triggerDOMRemove(view) {\n  if (view._isAttached && view._isRendered) {\n    triggerMethodOn(view, 'dom:remove', view);\n  }\n}\n\nfunction handleBeforeAttach() {\n  triggerMethodChildren(this, 'before:attach', shouldTriggerAttach);\n}\n\nfunction handleAttach() {\n  triggerMethodChildren(this, 'attach', shouldAttach);\n  triggerDOMRefresh(this);\n}\n\nfunction handleBeforeDetach() {\n  triggerMethodChildren(this, 'before:detach', shouldTriggerDetach);\n  triggerDOMRemove(this);\n}\n\nfunction handleDetach() {\n  triggerMethodChildren(this, 'detach', shouldDetach);\n}\n\nfunction handleBeforeRender() {\n  triggerDOMRemove(this);\n}\n\nfunction handleRender() {\n  triggerDOMRefresh(this);\n}\n\n// Monitor a view's state, propagating attach/detach events to children and firing dom:refresh\n// whenever a rendered view is attached or an attached view is rendered.\nfunction monitorViewEvents(view) {\n  if (view._areViewEventsMonitored || view.monitorViewEvents === false) { return; }\n\n  view._areViewEventsMonitored = true;\n\n  view.on({\n    'before:attach': handleBeforeAttach,\n    'attach': handleAttach,\n    'before:detach': handleBeforeDetach,\n    'detach': handleDetach,\n    'before:render': handleBeforeRender,\n    'render': handleRender\n  });\n}\n\nexport default monitorViewEvents;\n","// Bind Entity Events & Unbind Entity Events\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone \"entity\" (e.g. collection/model)\n// to methods on a target object.\n//\n// The first parameter, `target`, must have the Backbone.Events module mixed in.\n//\n// The second parameter is the `entity` (Backbone.Model, Backbone.Collection or\n// any object that has Backbone.Events mixed in) to bind the events from.\n//\n// The third parameter is a hash of { \"event:name\": \"eventHandler\" }\n// configuration. Multiple handlers can be separated by a space. A\n// function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport MarionetteError from '../error';\n\n// Bind/unbind the event to handlers specified as a string of\n// handler names on the target object\nfunction bindFromStrings(target, entity, evt, methods, actionName) {\n  const methodNames = methods.split(/\\s+/);\n\n  _.each(methodNames, function(methodName) {\n    const method = target[methodName];\n    if (!method) {\n      throw new MarionetteError(`Method \"${methodName}\" was configured as an event handler, but does not exist.`);\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\n// generic looping function\nfunction iterateEvents(target, entity, bindings, actionName) {\n  if (!entity || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindevents'\n    });\n  }\n\n  // iterate the bindings and bind/unbind them\n  _.each(bindings, function(method, evt) {\n\n    // allow for a list of method names as a string\n    if (_.isString(method)) {\n      bindFromStrings(target, entity, evt, method, actionName);\n      return;\n    }\n\n    target[actionName](entity, evt, method);\n  });\n}\n\nfunction bindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'listenTo');\n  return this;\n}\n\nfunction unbindEvents(entity, bindings) {\n  iterateEvents(this, entity, bindings, 'stopListening');\n  return this;\n}\n\n// Export Public API\nexport {\n  bindEvents,\n  unbindEvents\n};\n","// Bind/Unbind Radio Requests\n// -----------------------------------------\n//\n// These methods are used to bind/unbind a backbone.radio request\n// to methods on a target object.\n//\n// The first parameter, `target`, will set the context of the reply method\n//\n// The second parameter is the `Radio.channel` to bind the reply to.\n//\n// The third parameter is a hash of { \"request:name\": \"replyHandler\" }\n// configuration. A function can be supplied instead of a string handler name.\n\nimport _ from 'underscore';\nimport normalizeMethods from './normalize-methods';\nimport MarionetteError from '../error';\n\nfunction iterateReplies(target, channel, bindings, actionName) {\n  if (!channel || !bindings) { return; }\n\n  // type-check bindings\n  if (!_.isObject(bindings)) {\n    throw new MarionetteError({\n      message: 'Bindings must be an object.',\n      url: 'marionette.functions.html#marionettebindrequests'\n    });\n  }\n\n  const normalizedRadioRequests = normalizeMethods.call(target, bindings);\n\n  channel[actionName](normalizedRadioRequests, target);\n}\n\nfunction bindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'reply');\n  return this;\n}\n\nfunction unbindRequests(channel, bindings) {\n  iterateReplies(this, channel, bindings, 'stopReplying');\n  return this;\n}\n\nexport {\n  bindRequests,\n  unbindRequests\n};\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport { triggerMethod } from '../common/trigger-method';\nimport Marionette from '../backbone.marionette';\n\n// MixinOptions\n// - behaviors\n\n// Takes care of getting the behavior class\n// given options and a key.\n// If a user passes in options.behaviorClass\n// default to using that.\n// If a user passes in a Behavior Class directly, use that\n// Otherwise delegate the lookup to the users `behaviorsLookup` implementation.\nfunction getBehaviorClass(options, key) {\n  if (options.behaviorClass) {\n    return options.behaviorClass;\n    //treat functions as a Behavior constructor\n  } else if (_.isFunction(options)) {\n    return options;\n  }\n\n  // behaviorsLookup can be either a flat object or a method\n  if (_.isFunction(Marionette.Behaviors.behaviorsLookup)) {\n    return Marionette.Behaviors.behaviorsLookup(options, key)[key];\n  }\n\n  return Marionette.Behaviors.behaviorsLookup[key];\n}\n\n// Iterate over the behaviors object, for each behavior\n// instantiate it and get its grouped behaviors.\n// This accepts a list of behaviors in either an object or array form\nfunction parseBehaviors(view, behaviors) {\n  return _.chain(behaviors).map(function(options, key) {\n    const BehaviorClass = getBehaviorClass(options, key);\n    //if we're passed a class directly instead of an object\n    const _options = options === BehaviorClass ? {} : options;\n    const behavior = new BehaviorClass(_options, view);\n    const nestedBehaviors = parseBehaviors(view, _.result(behavior, 'behaviors'));\n\n    return [behavior].concat(nestedBehaviors);\n  }).flatten().value();\n}\n\nexport default {\n  _initBehaviors() {\n    this._behaviors = this._getBehaviors();\n  },\n\n  _getBehaviors() {\n    const behaviors = _.result(this, 'behaviors');\n\n    // Behaviors defined on a view can be a flat object literal\n    // or it can be a function that returns an object.\n    return _.isObject(behaviors) ? parseBehaviors(this, behaviors) : {};\n  },\n\n  _getBehaviorTriggers() {\n    const triggers = _invoke(this._behaviors, 'getTriggers');\n    return _.reduce(triggers, function(memo, _triggers) {\n      return _.extend(memo, _triggers);\n    }, {});\n  },\n\n  _getBehaviorEvents() {\n    const events = _invoke(this._behaviors, 'getEvents');\n    return _.reduce(events, function(memo, _events) {\n      return _.extend(memo, _events);\n    }, {});\n  },\n\n  // proxy behavior $el to the view's $el.\n  _proxyBehaviorViewProperties() {\n    _invoke(this._behaviors, 'proxyViewProperties');\n  },\n\n  // delegate modelEvents and collectionEvents\n  _delegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'delegateEntityEvents');\n  },\n\n  // undelegate modelEvents and collectionEvents\n  _undelegateBehaviorEntityEvents() {\n    _invoke(this._behaviors, 'undelegateEntityEvents');\n  },\n\n  _destroyBehaviors(...args) {\n    // Call destroy on each behavior after\n    // destroying the view.\n    // This unbinds event listeners\n    // that behaviors have registered for.\n    _invoke(this._behaviors, 'destroy', ...args);\n  },\n\n  // Remove a behavior\n  _removeBehavior(behavior) {\n    // Don't worry about the clean up if the view is destroyed\n    if (this._isDestroyed) { return; }\n    this._behaviors = _.without(this._behaviors, behavior);\n  },\n\n  _bindBehaviorUIElements() {\n    _invoke(this._behaviors, 'bindUIElements');\n  },\n\n  _unbindBehaviorUIElements() {\n    _invoke(this._behaviors, 'unbindUIElements');\n  },\n\n  _triggerEventOnBehaviors() {\n    const behaviors = this._behaviors;\n    // Use good ol' for as this is a very hot function\n    for (let i = 0, length = behaviors && behaviors.length; i < length; i++) {\n      triggerMethod.apply(behaviors[i], arguments);\n    }\n  }\n};\n","import _ from 'underscore';\n\n// Borrow event splitter from Backbone\nconst delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction uniqueName(eventName, selector) {\n  return `${ eventName }${ _.uniqueId('.evt') } ${ selector }`;\n}\n\n// Set event name to be namespaced using a unique index\n// to generate a non colliding event namespace\n// http://api.jquery.com/event.namespace/\nconst getUniqueEventName = function(eventName) {\n  const match = eventName.match(delegateEventSplitter);\n  return uniqueName(match[1], match[2]);\n};\n\nexport default getUniqueEventName;\n","// Add Feature flags here\n// e.g. 'class' => false\nconst FEATURES = {\n  childViewEventPrefix: true,\n  triggersStopPropagation: true,\n  triggersPreventDefault: true\n};\n\nfunction isEnabled(name) {\n  return !!FEATURES[name];\n}\n\nfunction setEnabled(name, state) {\n  return FEATURES[name] = state;\n}\n\nexport {\n  FEATURES,\n  setEnabled,\n  isEnabled\n};\n","import _ from 'underscore';\nimport getUniqueEventName from '../utils/get-unique-event-name';\nimport { isEnabled } from '../config/features';\n\n// Internal method to create an event handler for a given `triggerDef` like\n// 'click:foo'\nfunction buildViewTrigger(view, triggerDef) {\n  if (_.isString(triggerDef)) {\n    triggerDef = {event: triggerDef};\n  }\n\n  const eventName = triggerDef.event;\n\n  let shouldPreventDefault = !!triggerDef.preventDefault;\n\n  if (isEnabled('triggersPreventDefault')) {\n    shouldPreventDefault = triggerDef.preventDefault !== false;\n  }\n\n  let shouldStopPropagation = !!triggerDef.stopPropagation;\n\n  if (isEnabled('triggersStopPropagation')) {\n    shouldStopPropagation = triggerDef.stopPropagation !== false;\n  }\n\n  return function(event) {\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n\n    if (shouldStopPropagation) {\n      event.stopPropagation();\n    }\n\n    view.triggerMethod(eventName, view, event);\n  };\n}\n\nexport default {\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  _getViewTriggers(view, triggers) {\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return _.reduce(triggers, (events, value, key) => {\n      key = getUniqueEventName(key);\n      events[key] = buildViewTrigger(view, value);\n      return events;\n    }, {});\n  }\n\n};\n","// DomApi\n//  ---------\nimport _ from 'underscore';\nimport Backbone from 'backbone';\n\n// Performant method for returning the jQuery instance\nfunction getEl(el) {\n  return el instanceof Backbone.$ ? el : Backbone.$(el);\n}\n\n// Static setter\nexport function setDomApi(mixin) {\n  this.prototype.Dom = _.extend({}, this.prototype.Dom, mixin);\n  return this;\n}\n\nexport default {\n\n  // Returns a new HTML DOM node instance\n  createBuffer() {\n    return document.createDocumentFragment();\n  },\n\n  // Lookup the `selector` string\n  // Selector may also be a DOM element\n  // Returns an array-like object of nodes\n  getEl(selector) {\n    return getEl(selector);\n  },\n\n  // Finds the `selector` string with the el\n  // Returns an array-like object of nodes\n  findEl(el, selector, _$el = getEl(el)) {\n    return _$el.find(selector);\n  },\n\n  // Returns true if the el contains the node childEl\n  hasEl(el, childEl) {\n    return el.contains(childEl && childEl.parentNode);\n  },\n\n  // Detach `el` from the DOM without removing listeners\n  detachEl(el, _$el = getEl(el)) {\n    _$el.detach();\n  },\n\n  // Remove `oldEl` from the DOM and put `newEl` in its place\n  replaceEl(newEl, oldEl) {\n    if (newEl === oldEl) {\n      return;\n    }\n\n    const parent = oldEl.parentNode;\n\n    if (!parent) {\n      return;\n    }\n\n    parent.replaceChild(newEl, oldEl);\n  },\n\n  // Swaps the location of `el1` and `el2` in the DOM\n  swapEl(el1, el2) {\n    if (el1 === el2) {\n      return;\n    }\n\n    const parent1 = el1.parentNode;\n    const parent2 = el2.parentNode;\n\n    if (!parent1 || !parent2) {\n      return;\n    }\n\n    const next1 = el1.nextSibling;\n    const next2 = el2.nextSibling;\n\n    parent1.insertBefore(el2, next1);\n    parent2.insertBefore(el1, next2);\n  },\n\n  // Replace the contents of `el` with the HTML string of `html`\n  setContents(el, html, _$el = getEl(el)) {\n    _$el.html(html);\n  },\n\n  // Takes the DOM node `el` and appends the DOM node `contents`\n  // to the end of the element's contents.\n  appendContents(el, contents, {_$el = getEl(el), _$contents = getEl(contents)} = {}) {\n    _$el.append(_$contents);\n  },\n\n  // Does the el have child nodes\n  hasContents(el) {\n    return el.hasChildNodes();\n  },\n\n  // Remove the inner contents of `el` from the DOM while leaving\n  // `el` itself in the DOM.\n  detachContents(el, _$el = getEl(el)) {\n    _$el.contents().detach();\n  }\n};\n","import { triggerMethodOn } from '../common/trigger-method';\n\nexport function renderView(view) {\n  if (view._isRendered) {\n    return;\n  }\n\n  if (!view.supportsRenderLifecycle) {\n    triggerMethodOn(view, 'before:render', view);\n  }\n\n  view.render();\n\n  if (!view.supportsRenderLifecycle) {\n    view._isRendered = true;\n    triggerMethodOn(view, 'render', view);\n  }\n}\n\nexport function destroyView(view) {\n  if (view.destroy) {\n    view.destroy();\n    return;\n  }\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'before:destroy', view);\n  }\n\n  const shouldTriggerDetach = view._isAttached && !view._shouldDisableEvents;\n\n  if (shouldTriggerDetach) {\n    triggerMethodOn(view, 'before:detach', view);\n  }\n\n  view.remove();\n\n  if (shouldTriggerDetach) {\n    view._isAttached = false;\n    triggerMethodOn(view, 'detach', view);\n  }\n\n  view._isDestroyed = true;\n\n  if (!view.supportsDestroyLifecycle) {\n    triggerMethodOn(view, 'destroy', view);\n  }\n}\n","import _ from 'underscore';\nimport deprecate from '../utils/deprecate';\nimport MarionetteError from '../error';\nimport Region from '../region';\n\n// return the region instance from the definition\nexport default function(definition, defaults) {\n  if (definition instanceof Region) {\n    return definition;\n  }\n\n  return buildRegionFromDefinition(definition, defaults);\n}\n\nfunction buildRegionFromDefinition(definition, defaults) {\n  const opts = _.extend({}, defaults);\n\n  if (_.isString(definition)) {\n    _.extend(opts, { el: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isFunction(definition)) {\n    _.extend(opts, { regionClass: definition });\n\n    return buildRegionFromObject(opts);\n  }\n\n  if (_.isObject(definition)) {\n    if (definition.selector) {\n      deprecate('The selector option on a Region definition object is deprecated. Use el to pass a selector string');\n    }\n\n    _.extend(opts, { el: definition.selector }, definition);\n\n    return buildRegionFromObject(opts);\n  }\n\n  throw new MarionetteError({\n    message: 'Improper region configuration type.',\n    url: 'marionette.region.html#region-configuration-types'\n  });\n}\n\nfunction buildRegionFromObject(definition) {\n  const RegionClass = definition.regionClass\n\n  const options = _.omit(definition, 'regionClass');\n\n  return new RegionClass(options);\n}\n","//Internal utility for creating context style global utils\nconst proxy = function(method) {\n  return function(context, ...args) {\n    return method.apply(context, args);\n  };\n};\n\nexport default proxy;\n","// Marionette.extend\n// -----------------\n\nimport Backbone from 'backbone';\n\n// Borrow the Backbone `extend` method so we can use it as needed\nconst extend = Backbone.Model.extend;\n\nexport default extend;\n","/* global console */\n\nimport _ from 'underscore';\n\nimport Marionette from '../backbone.marionette';\n\nconst deprecate = function(message, test) {\n  if (_.isObject(message)) {\n    message = (\n      message.prev + ' is going to be removed in the future. ' +\n      'Please use ' + message.next + ' instead.' +\n      (message.url ? ' See: ' + message.url : '')\n    );\n  }\n\n  if (!Marionette.DEV_MODE) {\n    return;\n  }\n\n  if ((test === undefined || !test) && !deprecate._cache[message]) {\n    deprecate._warn('Deprecation warning: ' + message);\n    deprecate._cache[message] = true;\n  }\n};\n\n/* istanbul ignore next: can't clear console */\ndeprecate._console = typeof console !== 'undefined' ? console : {};\ndeprecate._warn = function() {\n  const warn = deprecate._console.warn || deprecate._console.log || _.noop;\n  return warn.apply(deprecate._console, arguments);\n};\ndeprecate._cache = {};\n\nexport default deprecate;\n","// Marionette.isNodeAttached\n// -------------------------\n\n// Determine if `el` is a child of the document\nconst isNodeAttached = function(el) {\n  return document.documentElement.contains(el && el.parentNode);\n};\n\nexport default isNodeAttached;\n","import _ from 'underscore';\n\n// Merge `keys` from `options` onto `this`\nconst mergeOptions = function(options, keys) {\n  if (!options) { return; }\n\n  _.each(keys, (key) => {\n    const option = options[key];\n    if (option !== undefined) {\n      this[key] = option;\n    }\n  });\n};\n\nexport default mergeOptions;\n","// Marionette.getOption\n// --------------------\n\n// Retrieve an object, function or other value from the\n// object or its `options`, with `options` taking precedence.\nconst getOption = function(optionName) {\n  if (!optionName) { return; }\n  if (this.options && (this.options[optionName] !== undefined)) {\n    return this.options[optionName];\n  } else {\n    return this[optionName];\n  }\n};\n\nexport default getOption;\n","import _ from 'underscore';\n\n// Marionette.normalizeMethods\n// ----------------------\n\n// Pass in a mapping of events => functions or function names\n// and return a mapping of events => functions\nconst normalizeMethods = function(hash) {\n  return _.reduce(hash, (normalizedHash, method, name) => {\n    if (!_.isFunction(method)) {\n      method = this[method];\n    }\n    if (method) {\n      normalizedHash[name] = method;\n    }\n    return normalizedHash;\n  }, {});\n};\n\nexport default normalizeMethods;\n","// Error\n// -----\n\nimport _ from 'underscore';\nimport extend from './utils/extend';\nimport {version} from '../package.json';\n\nconst errorProps = ['description', 'fileName', 'lineNumber', 'name', 'message', 'number'];\n\nconst MarionetteError = extend.call(Error, {\n  urlRoot: `http://marionettejs.com/docs/v${version}/`,\n\n  constructor(message, options) {\n    if (_.isObject(message)) {\n      options = message;\n      message = options.message;\n    } else if (!options) {\n      options = {};\n    }\n\n    const error = Error.call(this, message);\n    _.extend(this, _.pick(error, errorProps), _.pick(options, errorProps));\n\n    this.captureStackTrace();\n\n    if (options.url) {\n      this.url = this.urlRoot + options.url;\n    }\n  },\n\n  captureStackTrace() {\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, MarionetteError);\n    }\n  },\n\n  toString() {\n    return this.name + ': ' + this.message + (this.url ? ' See: ' + this.url : '');\n  }\n});\n\nMarionetteError.extend = extend;\n\nexport default MarionetteError;\n","import _ from 'underscore';\n\n// Internal utility for setting options consistently across Mn\nconst setOptions = function(options) {\n  this.options = _.extend({}, _.result(this, 'options'), options);\n};\n\nexport default setOptions;\n","import _setOptions from '../utils/set-options';\nimport getOption from '../common/get-option';\nimport mergeOptions from '../common/merge-options';\nimport normalizeMethods from '../common/normalize-methods';\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nexport default {\n\n  // Imports the \"normalizeMethods\" to transform hashes of\n  // events=>function references/names to a hash of events=>function references\n  normalizeMethods,\n\n  _setOptions,\n\n  // A handy way to merge passed-in options onto the instance\n  mergeOptions,\n\n  // Enable getting options from this or this.options by name.\n  getOption,\n\n  // Enable binding view's events from another entity.\n  bindEvents,\n\n  // Enable unbinding view's events from another entity.\n  unbindEvents\n};\n","import _ from 'underscore';\nimport Radio from 'backbone.radio';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from '../common/bind-requests';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\nimport MarionetteError from '../error';\n\n// MixinOptions\n// - channelName\n// - radioEvents\n// - radioRequests\n\nexport default {\n\n  _initRadio() {\n    const channelName = _.result(this, 'channelName');\n\n    if (!channelName) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!Radio) {\n      throw new MarionetteError({\n        name: 'BackboneRadioMissing',\n        message: 'The dependency \"backbone.radio\" is missing.'\n      });\n    }\n\n    const channel = this._channel = Radio.channel(channelName);\n\n    const radioEvents = _.result(this, 'radioEvents');\n    this.bindEvents(channel, radioEvents);\n\n    const radioRequests = _.result(this, 'radioRequests');\n    this.bindRequests(channel, radioRequests);\n\n    this.on('destroy', this._destroyRadio);\n  },\n\n  _destroyRadio() {\n    this._channel.stopReplying(null, null, this);\n  },\n\n  getChannel() {\n    return this._channel;\n  },\n\n  // Proxy `bindEvents`\n  bindEvents: bindEvents,\n\n  // Proxy `unbindEvents`\n  unbindEvents: unbindEvents,\n\n  // Proxy `bindRequests`\n  bindRequests: bindRequests,\n\n  // Proxy `unbindRequests`\n  unbindRequests: unbindRequests\n\n};\n","// Object\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport extend from './utils/extend';\nimport { triggerMethod } from './common/trigger-method';\nimport CommonMixin from './mixins/common';\nimport RadioMixin from './mixins/radio';\n\nconst ClassOptions = [\n  'channelName',\n  'radioEvents',\n  'radioRequests'\n];\n\n// A Base Class that other Classes should descend from.\n// Object borrows many conventions and utilities from Backbone.\nconst MarionetteObject = function(options) {\n  if (!this.hasOwnProperty('options')) {\n    this._setOptions(options);\n  }\n  this.mergeOptions(options, ClassOptions);\n  this._setCid();\n  this._initRadio();\n  this.initialize.apply(this, arguments);\n};\n\nMarionetteObject.extend = extend;\n\n// Object Methods\n// --------------\n\n// Ensure it can trigger events with Backbone.Events\n_.extend(MarionetteObject.prototype, Backbone.Events, CommonMixin, RadioMixin, {\n  cidPrefix: 'mno',\n\n  // for parity with Marionette.AbstractView lifecyle\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return this._isDestroyed;\n  },\n\n  //this is a noop method intended to be overridden by classes that extend from this base\n  initialize() {},\n\n  _setCid() {\n    if (this.cid) { return; }\n    this.cid = _.uniqueId(this.cidPrefix);\n  },\n\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:destroy', this, ...args);\n\n    this._isDestroyed = true;\n    this.triggerMethod('destroy', this, ...args);\n    this.stopListening();\n\n    return this;\n  },\n\n  triggerMethod\n});\n\nexport default MarionetteObject;\n","// Template Cache\n// --------------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport MarionetteError from './error';\n\n// Manage templates stored in `<script>` blocks,\n// caching them for faster access.\nconst TemplateCache = function(templateId) {\n  this.templateId = templateId;\n};\n\n// TemplateCache object-level methods. Manage the template\n// caches from these method calls instead of creating\n// your own TemplateCache instances\n_.extend(TemplateCache, {\n\n  templateCaches: {},\n\n  // Get the specified template by id. Either\n  // retrieves the cached version, or loads it\n  // from the DOM.\n  get(templateId, options) {\n    let cachedTemplate = this.templateCaches[templateId];\n\n    if (!cachedTemplate) {\n      cachedTemplate = new TemplateCache(templateId);\n      this.templateCaches[templateId] = cachedTemplate;\n    }\n\n    return cachedTemplate.load(options);\n  },\n\n  // Clear templates from the cache. If no arguments\n  // are specified, clears all templates:\n  // `clear()`\n  //\n  // If arguments are specified, clears each of the\n  // specified templates from the cache:\n  // `clear(\"#t1\", \"#t2\", \"...\")`\n  clear(...args) {\n    let i;\n    const length = args.length;\n\n    if (length > 0) {\n      for (i = 0; i < length; i++) {\n        delete this.templateCaches[args[i]];\n      }\n    } else {\n      this.templateCaches = {};\n    }\n  }\n});\n\n// TemplateCache instance methods, allowing each\n// template cache object to manage its own state\n// and know whether or not it has been loaded\n_.extend(TemplateCache.prototype, {\n\n  // Internal method to load the template\n  load(options) {\n    // Guard clause to prevent loading this template more than once\n    if (this.compiledTemplate) {\n      return this.compiledTemplate;\n    }\n\n    // Load the template and compile it\n    const template = this.loadTemplate(this.templateId, options);\n    this.compiledTemplate = this.compileTemplate(template, options);\n\n    return this.compiledTemplate;\n  },\n\n  // Load a template from the DOM, by default. Override\n  // this method to provide your own template retrieval\n  // For asynchronous loading with AMD/RequireJS, consider\n  // using a template-loader plugin as described here:\n  // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs\n  loadTemplate(templateId, options) {\n    const $template = Backbone.$(templateId);\n\n    if (!$template.length) {\n      throw new MarionetteError({\n        name: 'NoTemplateError',\n        message: `Could not find template: \"${templateId}\"`\n      });\n    }\n    return $template.html();\n  },\n\n  // Pre-compile the template before caching it. Override\n  // this method if you do not need to pre-compile a template\n  // (JST / RequireJS for example) or if you want to change\n  // the template engine used (Handebars, etc).\n  compileTemplate(rawTemplate, options) {\n    return _.template(rawTemplate, options);\n  }\n});\n\nexport default TemplateCache;\n","// Implementation of the invoke method (http://underscorejs.org/#invoke) with support for\n// lodash v3, v4, and underscore.js\nimport _ from 'underscore';\n\nexport default _.invokeMap || _.invoke;\n","import _ from 'underscore';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from '../common/bind-events';\n\n// MixinOptions\n// - collectionEvents\n// - modelEvents\n\nexport default {\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  _delegateEntityEvents(model, collection) {\n    this._undelegateEntityEvents(model, collection);\n\n    const modelEvents = _.result(this, 'modelEvents');\n    bindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    bindEvents.call(this, collection, collectionEvents);\n  },\n\n  _undelegateEntityEvents(model, collection) {\n    const modelEvents = _.result(this, 'modelEvents');\n    unbindEvents.call(this, model, modelEvents);\n\n    const collectionEvents = _.result(this, 'collectionEvents');\n    unbindEvents.call(this, collection, collectionEvents);\n  }\n};\n","import _ from 'underscore';\n// allows for the use of the @ui. syntax within\n// a given key for triggers and events\n// swaps the @ui with the associated selector.\n// Returns a new, non-mutated, parsed events hash.\nconst normalizeUIKeys = function(hash, ui) {\n  return _.reduce(hash, (memo, val, key) => {\n    const normalizedKey = normalizeUIString(key, ui);\n    memo[normalizedKey] = val;\n    return memo;\n  }, {});\n};\n\n// utility method for parsing @ui. syntax strings\n// into associated selector\nconst normalizeUIString = function(uiString, ui) {\n  return uiString.replace(/@ui\\.[a-zA-Z-_$0-9]*/g, (r) => {\n    return ui[r.slice(4)];\n  });\n};\n\n// allows for the use of the @ui. syntax within\n// a given value for regions\n// swaps the @ui with the associated selector\nconst normalizeUIValues = function(hash, ui, properties) {\n  _.each(hash, (val, key) => {\n    if (_.isString(val)) {\n      hash[key] = normalizeUIString(val, ui);\n    } else if (_.isObject(val) && _.isArray(properties)) {\n      _.extend(val, normalizeUIValues(_.pick(val, properties), ui));\n      /* Value is an object, and we got an array of embedded property names to normalize. */\n      _.each(properties, (property) => {\n        const propertyVal = val[property];\n        if (_.isString(propertyVal)) {\n          val[property] = normalizeUIString(propertyVal, ui);\n        }\n      });\n    }\n  });\n  return hash;\n};\n\nexport default {\n\n  // normalize the keys of passed hash with the views `ui` selectors.\n  // `{\"@ui.foo\": \"bar\"}`\n  normalizeUIKeys(hash) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIKeys(hash, uiBindings);\n  },\n\n  // normalize the passed string with the views `ui` selectors.\n  // `\"@ui.bar\"`\n  normalizeUIString(uiString) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIString(uiString, uiBindings);\n  },\n\n  // normalize the values of passed hash with the views `ui` selectors.\n  // `{foo: \"@ui.bar\"}`\n  normalizeUIValues(hash, properties) {\n    const uiBindings = this._getUIBindings();\n    return normalizeUIValues(hash, uiBindings, properties);\n  },\n\n  _getUIBindings() {\n    const uiBindings = _.result(this, '_uiBindings');\n    const ui = _.result(this, 'ui');\n    return uiBindings || ui;\n  },\n\n  // This method binds the elements specified in the \"ui\" hash inside the view's code with\n  // the associated jQuery selectors.\n  _bindUIElements() {\n    if (!this.ui) { return; }\n\n    // store the ui hash in _uiBindings so they can be reset later\n    // and so re-rendering the view will be able to find the bindings\n    if (!this._uiBindings) {\n      this._uiBindings = this.ui;\n    }\n\n    // get the bindings result, as a function or otherwise\n    const bindings = _.result(this, '_uiBindings');\n\n    // empty the ui so we don't have anything to start with\n    this._ui = {};\n\n    // bind each of the selectors\n    _.each(bindings, (selector, key) => {\n      this._ui[key] = this.$(selector);\n    });\n\n    this.ui = this._ui;\n  },\n\n  _unbindUIElements() {\n    if (!this.ui || !this._uiBindings) { return; }\n\n    // delete all of the existing ui bindings\n    _.each(this.ui, ($el, name) => {\n      delete this.ui[name];\n    });\n\n    // reset the ui element to the original bindings configuration\n    this.ui = this._uiBindings;\n    delete this._uiBindings;\n    delete this._ui;\n  },\n\n  _getUI(name) {\n    return this._ui[name];\n  }\n};\n","// ViewMixin\n//  ---------\n\nimport Backbone from 'backbone';\nimport _ from 'underscore';\nimport { triggerMethod } from '../common/trigger-method';\nimport BehaviorsMixin from './behaviors';\nimport CommonMixin from './common';\nimport DelegateEntityEventsMixin from './delegate-entity-events';\nimport TriggersMixin from './triggers';\nimport UIMixin from './ui';\nimport { isEnabled } from '../config/features';\nimport DomApi from '../config/dom';\n\n// MixinOptions\n// - behaviors\n// - childViewEventPrefix\n// - childViewEvents\n// - childViewTriggers\n// - collectionEvents\n// - modelEvents\n// - triggers\n// - ui\n\n\nconst ViewMixin = {\n  Dom: DomApi,\n\n  supportsRenderLifecycle: true,\n  supportsDestroyLifecycle: true,\n\n  _isDestroyed: false,\n\n  isDestroyed() {\n    return !!this._isDestroyed;\n  },\n\n  _isRendered: false,\n\n  isRendered() {\n    return !!this._isRendered;\n  },\n\n  _isAttached: false,\n\n  isAttached() {\n    return !!this._isAttached;\n  },\n\n  // Overriding Backbone.View's `delegateEvents` to handle\n  // `events` and `triggers`\n  delegateEvents(eventsArg) {\n\n    this._proxyBehaviorViewProperties();\n    this._buildEventProxies();\n\n    const viewEvents = this._getEvents(eventsArg);\n\n    if (typeof eventsArg === 'undefined') {\n      this.events = viewEvents;\n    }\n\n    const combinedEvents = _.extend({},\n      this._getBehaviorEvents(),\n      viewEvents,\n      this._getBehaviorTriggers(),\n      this.getTriggers()\n    );\n\n    Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\n\n    return this;\n  },\n\n  _getEvents(eventsArg) {\n    const events = eventsArg || this.events;\n\n    if (_.isFunction(events)) {\n      return this.normalizeUIKeys(events.call(this));\n    }\n\n    return this.normalizeUIKeys(events);\n  },\n\n  // Configure `triggers` to forward DOM events to view\n  // events. `triggers: {\"click .foo\": \"do:foo\"}`\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Allow `triggers` to be configured as a function\n    const triggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    // Configure the triggers, prevent default\n    // action and stop propagation of DOM events\n    return this._getViewTriggers(this, triggers);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.model, this.collection);\n\n    // bind each behaviors model and collection events\n    this._delegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle unbinding `modelEvents`, and `collectionEvents` configuration\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.model, this.collection);\n\n    // unbind each behaviors model and collection events\n    this._undelegateBehaviorEntityEvents();\n\n    return this;\n  },\n\n  // Handle destroying the view and its children.\n  destroy(...args) {\n    if (this._isDestroyed) { return this; }\n    const shouldTriggerDetach = this._isAttached && !this._shouldDisableEvents;\n\n    this.triggerMethod('before:destroy', this, ...args);\n    if (shouldTriggerDetach) {\n      this.triggerMethod('before:detach', this);\n    }\n\n    // unbind UI elements\n    this.unbindUIElements();\n\n    // remove the view from the DOM\n    this._removeElement();\n\n    if (shouldTriggerDetach) {\n      this._isAttached = false;\n      this.triggerMethod('detach', this);\n    }\n\n    // remove children after the remove to prevent extra paints\n    this._removeChildren();\n\n    this._isDestroyed = true;\n    this._isRendered = false;\n\n    // Destroy behaviors after _isDestroyed flag\n    this._destroyBehaviors(...args);\n\n    this.triggerMethod('destroy', this, ...args);\n\n    this.stopListening();\n\n    return this;\n  },\n\n  // Equates to this.$el.remove\n  _removeElement() {\n    this.$el.off().removeData();\n    this.Dom.detachEl(this.el, this.$el);\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n    this._bindBehaviorUIElements();\n\n    return this;\n  },\n\n  // This method unbinds the elements specified in the \"ui\" hash\n  unbindUIElements() {\n    this._unbindUIElements();\n    this._unbindBehaviorUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    return this._getUI(name);\n  },\n\n  // used as the prefix for child view events\n  // that are forwarded through the layoutview\n  childViewEventPrefix() {\n    return isEnabled('childViewEventPrefix') ? 'childview' : false;\n  },\n\n  // import the `triggerMethod` to trigger events with corresponding\n  // methods if the method exists\n  triggerMethod() {\n    const ret = triggerMethod.apply(this, arguments);\n\n    this._triggerEventOnBehaviors.apply(this, arguments);\n\n    return ret;\n  },\n\n  // Cache `childViewEvents` and `childViewTriggers`\n  _buildEventProxies() {\n    this._childViewEvents = _.result(this, 'childViewEvents');\n    this._childViewTriggers = _.result(this, 'childViewTriggers');\n  },\n\n  _proxyChildViewEvents(view) {\n    this.listenTo(view, 'all', this._childViewEventHandler);\n  },\n\n  _childViewEventHandler(eventName, ...args) {\n    const childViewEvents = this.normalizeMethods(this._childViewEvents);\n\n    // call collectionView childViewEvent if defined\n    if (typeof childViewEvents !== 'undefined' && _.isFunction(childViewEvents[eventName])) {\n      childViewEvents[eventName].apply(this, args);\n    }\n\n    // use the parent view's proxyEvent handlers\n    const childViewTriggers = this._childViewTriggers;\n\n    // Call the event with the proxy name on the parent layout\n    if (childViewTriggers && _.isString(childViewTriggers[eventName])) {\n      this.triggerMethod(childViewTriggers[eventName], ...args);\n    }\n\n    const prefix = _.result(this, 'childViewEventPrefix');\n\n    if (prefix !== false) {\n      const childEventName = prefix + ':' + eventName;\n\n      this.triggerMethod(childEventName, ...args);\n    }\n  }\n};\n\n_.extend(ViewMixin, BehaviorsMixin, CommonMixin, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default ViewMixin;\n","// Region\n// ------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport deprecate from './utils/deprecate';\nimport { renderView, destroyView } from './common/view';\nimport monitorViewEvents from './common/monitor-view-events';\nimport isNodeAttached from './common/is-node-attached';\nimport { triggerMethodOn } from './common/trigger-method';\nimport MarionetteObject from './object';\nimport MarionetteError from './error';\nimport View from './view';\nimport DomApi, { setDomApi } from './config/dom';\n\nconst ClassOptions = [\n  'allowMissingEl',\n  'parentEl',\n  'replaceElement'\n];\n\nconst Region = MarionetteObject.extend({\n  Dom: DomApi,\n\n  cidPrefix: 'mnr',\n  replaceElement: false,\n  _isReplaced: false,\n  _isSwappingView: false,\n\n  constructor(options) {\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    // getOption necessary because options.el may be passed as undefined\n    this._initEl = this.el = this.getOption('el');\n\n    // Handle when this.el is passed in as a $ wrapped element.\n    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;\n\n    if (!this.el) {\n      throw new MarionetteError({\n        name: 'NoElError',\n        message: 'An \"el\" must be specified for a region.'\n      });\n    }\n\n    this.$el = this.getEl(this.el);\n    MarionetteObject.call(this, options);\n  },\n\n  // Displays a backbone view instance inside of the region. Handles calling the `render`\n  // method for you. Reads content directly from the `el` attribute. The `preventDestroy`\n  // option can be used to prevent a view from the old view being destroyed on show.\n  show(view, options) {\n    if (!this._ensureElement(options)) {\n      return;\n    }\n\n    view = this._getView(view, options);\n\n    if (view === this.currentView) { return this; }\n\n    this._isSwappingView = !!this.currentView;\n\n    this.triggerMethod('before:show', this, view, options);\n\n    // Assume an attached view is already in the region for pre-existing DOM\n    if (!view._isAttached) {\n      this.empty(options);\n    }\n\n    this._setupChildView(view);\n\n    this.currentView = view;\n\n    renderView(view);\n\n    this._attachView(view, options);\n\n    this.triggerMethod('show', this, view, options);\n\n    this._isSwappingView = false;\n\n    return this;\n  },\n\n  _setupChildView(view) {\n    monitorViewEvents(view);\n\n    this._proxyChildViewEvents(view);\n\n    // We need to listen for if a view is destroyed in a way other than through the region.\n    // If this happens we need to remove the reference to the currentView since once a view\n    // has been destroyed we can not reuse it.\n    view.on('destroy', this._empty, this);\n  },\n\n  _proxyChildViewEvents(view) {\n    const parentView = this._parentView;\n\n    if (!parentView) { return; }\n\n    parentView._proxyChildViewEvents(view);\n  },\n\n  // If the regions parent view is not monitoring its attach/detach events\n  _shouldDisableMonitoring() {\n    return this._parentView && this._parentView.monitorViewEvents === false;\n  },\n\n  _attachView(view, options = {}) {\n    const shouldTriggerAttach = !view._isAttached && isNodeAttached(this.el) && !this._shouldDisableMonitoring();\n    const shouldReplaceEl = typeof options.replaceElement === 'undefined' ? !!_.result(this, 'replaceElement') : !!options.replaceElement;\n\n    if (shouldTriggerAttach) {\n      triggerMethodOn(view, 'before:attach', view);\n    }\n\n    if (shouldReplaceEl) {\n      this._replaceEl(view);\n    } else {\n      this.attachHtml(view);\n    }\n\n    if (shouldTriggerAttach) {\n      view._isAttached = true;\n      triggerMethodOn(view, 'attach', view);\n    }\n  },\n\n  _ensureElement(options = {}) {\n    if (!_.isObject(this.el)) {\n      this.$el = this.getEl(this.el);\n      this.el = this.$el[0];\n      // Make sure the $el contains only the el\n      this.$el = this.Dom.getEl(this.el);\n    }\n\n    if (!this.$el || this.$el.length === 0) {\n      const allowMissingEl = typeof options.allowMissingEl === 'undefined' ? !!_.result(this, 'allowMissingEl') : !!options.allowMissingEl;\n\n      if (allowMissingEl) {\n        return false;\n      } else {\n        throw new MarionetteError(`An \"el\" must exist in DOM for this region ${this.cid}`);\n      }\n    }\n    return true;\n  },\n\n  _getView(view) {\n    if (!view) {\n      throw new MarionetteError({\n        name: 'ViewNotValid',\n        message: 'The view passed is undefined and therefore invalid. You must pass a view instance to show.'\n      });\n    }\n\n    if (view._isDestroyed) {\n      throw new MarionetteError({\n        name: 'ViewDestroyedError',\n        message: `View (cid: \"${view.cid}\") has already been destroyed and cannot be used.`\n      });\n    }\n\n    if (view instanceof Backbone.View) {\n      return view;\n    }\n\n    const viewOptions = this._getViewOptions(view);\n\n    return new View(viewOptions);\n  },\n\n  // This allows for a template or a static string to be\n  // used as a template\n  _getViewOptions(viewOptions) {\n    if (_.isFunction(viewOptions)) {\n      return { template: viewOptions };\n    }\n\n    if (_.isObject(viewOptions)) {\n      return viewOptions;\n    }\n\n    const template = function() { return viewOptions; };\n\n    return { template };\n  },\n\n  // Override this method to change how the region finds the DOM element that it manages. Return\n  // a jQuery selector object scoped to a provided parent el or the document if none exists.\n  getEl(el) {\n    const context = _.result(this, 'parentEl');\n\n    if (context && _.isString(el)) {\n      return this.Dom.findEl(context, el);\n    }\n\n    return this.Dom.getEl(el);\n  },\n\n  _replaceEl(view) {\n    // always restore the el to ensure the regions el is present before replacing\n    this._restoreEl();\n\n    view.on('before:destroy', this._restoreEl, this);\n\n    this.Dom.replaceEl(view.el, this.el);\n\n    this._isReplaced = true;\n  },\n\n  // Restore the region's element in the DOM.\n  _restoreEl() {\n    // There is nothing to replace\n    if (!this._isReplaced) {\n      return;\n    }\n\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._detachView(view);\n\n    this._isReplaced = false;\n  },\n\n  // Check to see if the region's el was replaced.\n  isReplaced() {\n    return !!this._isReplaced;\n  },\n\n  // Check to see if a view is being swapped by another\n  isSwappingView() {\n    return !!this._isSwappingView;\n  },\n\n  // Override this method to change how the new view is appended to the `$el` that the\n  // region is managing\n  attachHtml(view) {\n    this.Dom.appendContents(this.el, view.el, {_$el: this.$el, _$contents: view.$el});\n  },\n\n  // Destroy the current view, if there is one. If there is no current view, it does\n  // nothing and returns immediately.\n  empty(options = { allowMissingEl: true }) {\n    const view = this.currentView;\n\n    // If there is no view in the region we should only detach current html\n    if (!view) {\n      if (this._ensureElement(options)) {\n        this.detachHtml();\n      }\n      return this;\n    }\n\n    const shouldDestroy = !options.preventDestroy;\n\n    if (!shouldDestroy) {\n      deprecate('The preventDestroy option is deprecated. Use Region#detachView');\n    }\n\n    this._empty(view, shouldDestroy);\n    return this;\n  },\n\n  _empty(view, shouldDestroy) {\n    view.off('destroy', this._empty, this);\n    this.triggerMethod('before:empty', this, view);\n\n    this._restoreEl();\n\n    delete this.currentView;\n\n    if (!view._isDestroyed) {\n      if (shouldDestroy) {\n        this.removeView(view);\n      } else {\n        this._detachView(view);\n      }\n      this._stopChildViewEvents(view);\n    }\n\n    this.triggerMethod('empty', this, view);\n  },\n\n  _stopChildViewEvents(view) {\n    const parentView = this._parentView;\n\n    if (!parentView) { return; }\n\n    this._parentView.stopListening(view);\n  },\n\n  destroyView(view) {\n    if (view._isDestroyed) {\n      return view;\n    }\n\n    view._shouldDisableEvents = this._shouldDisableMonitoring();\n    destroyView(view);\n    return view;\n  },\n\n  removeView(view) {\n    this.destroyView(view);\n  },\n\n  // Empties the Region without destroying the view\n  // Returns the detached view\n  detachView() {\n    const view = this.currentView;\n\n    if (!view) {\n      return;\n    }\n\n    this._empty(view);\n\n    return view;\n  },\n\n  _detachView(view) {\n    const shouldTriggerDetach = view._isAttached && !this._shouldDisableMonitoring();;\n    const shouldRestoreEl = this._isReplaced;\n    if (shouldTriggerDetach) {\n      triggerMethodOn(view, 'before:detach', view);\n    }\n\n    if (shouldRestoreEl) {\n      this.Dom.replaceEl(this.el, view.el);\n    } else {\n      this.detachHtml();\n    }\n\n    if (shouldTriggerDetach) {\n      view._isAttached = false;\n      triggerMethodOn(view, 'detach', view);\n    }\n  },\n\n  // Override this method to change how the region detaches current content\n  detachHtml() {\n    this.Dom.detachContents(this.el, this.$el);\n  },\n\n  // Checks whether a view is currently present within the region. Returns `true` if there is\n  // and `false` if no view is present.\n  hasView() {\n    return !!this.currentView;\n  },\n\n  // Reset the region by destroying any existing view and clearing out the cached `$el`.\n  // The next time a view is shown via this region, the region will re-query the DOM for\n  // the region's `el`.\n  reset(options) {\n    this.empty(options);\n\n    if (this.$el) {\n      this.el = this._initEl;\n    }\n\n    delete this.$el;\n    return this;\n  },\n\n  destroy(options) {\n    if (this._isDestroyed) { return this; }\n\n    this.reset(options);\n\n    if (this._name) {\n      this._parentView._removeReferences(this._name);\n    }\n    delete this._parentView;\n    delete this._name;\n\n    return MarionetteObject.prototype.destroy.apply(this, arguments);\n  }\n}, {\n  setDomApi\n});\n\nexport default Region;\n","import _ from 'underscore';\nimport _invoke from '../utils/invoke';\nimport buildRegion from '../common/build-region';\nimport Region from '../region';\n\n// MixinOptions\n// - regions\n// - regionClass\n\nexport default {\n  regionClass: Region,\n\n  // Internal method to initialize the regions that have been defined in a\n  // `regions` attribute on this View.\n  _initRegions() {\n\n    // init regions hash\n    this.regions = this.regions || {};\n    this._regions = {};\n\n    this.addRegions(_.result(this, 'regions'));\n  },\n\n  // Internal method to re-initialize all of the regions by updating\n  // the `el` that they point to\n  _reInitRegions() {\n    _invoke(this._regions, 'reset');\n  },\n\n  // Add a single region, by name, to the View\n  addRegion(name, definition) {\n    const regions = {};\n    regions[name] = definition;\n    return this.addRegions(regions)[name];\n  },\n\n  // Add multiple regions as a {name: definition, name2: def2} object literal\n  addRegions(regions) {\n    // If there's nothing to add, stop here.\n    if (_.isEmpty(regions)) {\n      return;\n    }\n\n    // Normalize region selectors hash to allow\n    // a user to use the @ui. syntax.\n    regions = this.normalizeUIValues(regions, ['selector', 'el']);\n\n    // Add the regions definitions to the regions property\n    this.regions = _.extend({}, this.regions, regions);\n\n    return this._addRegions(regions);\n  },\n\n  // internal method to build and add regions\n  _addRegions(regionDefinitions) {\n    const defaults = {\n      regionClass: this.regionClass,\n      parentEl: _.partial(_.result, this, 'el')\n    };\n\n    return _.reduce(regionDefinitions, (regions, definition, name) => {\n      regions[name] = buildRegion(definition, defaults);\n      this._addRegion(regions[name], name);\n      return regions;\n    }, {});\n  },\n\n  _addRegion(region, name) {\n    this.triggerMethod('before:add:region', this, name, region);\n\n    region._parentView = this;\n    region._name = name;\n\n    this._regions[name] = region;\n\n    this.triggerMethod('add:region', this, name, region);\n  },\n\n  // Remove a single region from the View, by name\n  removeRegion(name) {\n    const region = this._regions[name];\n\n    this._removeRegion(region, name);\n\n    return region;\n  },\n\n  // Remove all regions from the View\n  removeRegions() {\n    const regions = this._getRegions();\n\n    _.each(this._regions, _.bind(this._removeRegion, this));\n\n    return regions;\n  },\n\n  _removeRegion(region, name) {\n    this.triggerMethod('before:remove:region', this, name, region);\n\n    region.destroy();\n\n    this.triggerMethod('remove:region', this, name, region);\n  },\n\n  // Called in a region's destroy\n  _removeReferences(name) {\n    delete this.regions[name];\n    delete this._regions[name];\n  },\n\n  // Empty all regions in the region manager, but\n  // leave them attached\n  emptyRegions() {\n    const regions = this.getRegions();\n    _invoke(regions, 'empty');\n    return regions;\n  },\n\n  // Checks to see if view contains region\n  // Accepts the region name\n  // hasRegion('main')\n  hasRegion(name) {\n    return !!this.getRegion(name);\n  },\n\n  // Provides access to regions\n  // Accepts the region name\n  // getRegion('main')\n  getRegion(name) {\n    if (!this._isRendered) {\n      this.render();\n    }\n    return this._regions[name];\n  },\n\n  // Get all regions\n  _getRegions() {\n    return _.clone(this._regions);\n  },\n\n  getRegions() {\n    if (!this._isRendered) {\n      this.render();\n    }\n    return this._getRegions();\n  },\n\n  showChildView(name, view, ...args) {\n    const region = this.getRegion(name);\n    return region.show(view, ...args);\n  },\n\n  detachChildView(name) {\n    return this.getRegion(name).detachView();\n  },\n\n  getChildView(name) {\n    return this.getRegion(name).currentView;\n  }\n\n};\n","// Renderer\n// --------\n\nimport _ from 'underscore';\nimport MarionetteError from '../error';\nimport TemplateCache from '../template-cache';\n\n// Render a template with data by passing in the template\n// selector and the data to render.\nconst Renderer = {\n\n  // Render a template with data. The `template` parameter is\n  // passed to the `TemplateCache` object to retrieve the\n  // template function. Override this method to provide your own\n  // custom rendering and template handling for all of Marionette.\n  render(template, data) {\n    if (!template) {\n      throw new MarionetteError({\n        name: 'TemplateNotFoundError',\n        message: 'Cannot render the template since its false, null or undefined.'\n      });\n    }\n\n    const templateFunc = _.isFunction(template) ? template : TemplateCache.get(template);\n\n    return templateFunc(data);\n  }\n};\n\nexport default Renderer;\n","// View\n// ---------\n\nimport _ from 'underscore';\nimport Backbone from 'backbone';\nimport deprecate from './utils/deprecate';\nimport isNodeAttached from './common/is-node-attached';\nimport monitorViewEvents from './common/monitor-view-events';\nimport ViewMixin from './mixins/view';\nimport RegionsMixin from './mixins/regions';\nimport Renderer from './config/renderer';\nimport { setDomApi } from './config/dom';\n\nconst ClassOptions = [\n  'behaviors',\n  'childViewEventPrefix',\n  'childViewEvents',\n  'childViewTriggers',\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'regionClass',\n  'regions',\n  'template',\n  'templateContext',\n  'triggers',\n  'ui'\n];\n\n// The standard view. Includes view events, automatic rendering\n// of Underscore templates, nested views, and more.\nconst View = Backbone.View.extend({\n\n  constructor(options) {\n    this.render = _.bind(this.render, this);\n\n    this._setOptions(options);\n\n    this.mergeOptions(options, ClassOptions);\n\n    monitorViewEvents(this);\n\n    this._initBehaviors();\n    this._initRegions();\n\n    const args = Array.prototype.slice.call(arguments);\n    args[0] = this.options;\n    Backbone.View.prototype.constructor.apply(this, args);\n\n    this.delegateEntityEvents();\n\n    this._triggerEventOnBehaviors('initialize', this);\n  },\n\n  // Serialize the view's model *or* collection, if\n  // it exists, for the template\n  serializeData() {\n    if (!this.model && !this.collection) {\n      return {};\n    }\n\n    // If we have a model, we serialize that\n    if (this.model) {\n      return this.serializeModel();\n    }\n\n    // Otherwise, we serialize the collection,\n    // making it available under the `items` property\n    return {\n      items: this.serializeCollection()\n    };\n  },\n\n  // Prepares the special `model` property of a view\n  // for being displayed in the template. By default\n  // we simply clone the attributes. Override this if\n  // you need a custom transformation for your view's model\n  serializeModel() {\n    if (!this.model) { return {}; }\n    return _.clone(this.model.attributes);\n  },\n\n  // Serialize a collection by cloning each of\n  // its model's attributes\n  serializeCollection() {\n    if (!this.collection) { return {}; }\n    return this.collection.map(function(model) { return _.clone(model.attributes); });\n  },\n\n  // Overriding Backbone.View's `setElement` to handle\n  // if an el was previously defined. If so, the view might be\n  // rendered or attached on setElement.\n  setElement() {\n    const hasEl = !!this.el;\n\n    Backbone.View.prototype.setElement.apply(this, arguments);\n\n    if (hasEl) {\n      this._isRendered = this.Dom.hasContents(this.el);\n      this._isAttached = isNodeAttached(this.el);\n    }\n\n    if (this._isRendered) {\n      this.bindUIElements();\n    }\n\n    return this;\n  },\n\n  // Render the view, defaulting to underscore.js templates.\n  // You can override this in your view definition to provide\n  // a very specific rendering for your view. In general, though,\n  // you should override the `Marionette.Renderer` object to\n  // change how Marionette renders views.\n  // Subsequent renders after the first will re-render all nested\n  // views.\n  render() {\n    if (this._isDestroyed) { return this; }\n\n    this.triggerMethod('before:render', this);\n\n    // If this is not the first render call, then we need to\n    // re-initialize the `el` for each region\n    if (this._isRendered) {\n      this._reInitRegions();\n    }\n\n    this._renderTemplate();\n    this.bindUIElements();\n\n    this._isRendered = true;\n    this.triggerMethod('render', this);\n\n    return this;\n  },\n\n  // Internal method to render the template with the serialized data\n  // and template context via the `Marionette.Renderer` object.\n  _renderTemplate() {\n    const template = this.getTemplate();\n\n    // Allow template-less views\n    if (template === false) {\n      deprecate('template:false is deprecated.  Use _.noop.');\n      return;\n    }\n\n    // Add in entity data and template context\n    const data = this.mixinTemplateContext(this.serializeData());\n\n    // Render and add to el\n    const html = this._renderHtml(template, data);\n    this.attachElContent(html);\n  },\n\n  // Renders the data into the template\n  _renderHtml(template, data) {\n    return Renderer.render(template, data, this);\n  },\n\n  // Get the template for this view\n  // instance. You can set a `template` attribute in the view\n  // definition or pass a `template: \"whatever\"` parameter in\n  // to the constructor options.\n  getTemplate() {\n    return this.template;\n  },\n\n  // Mix in template context methods. Looks for a\n  // `templateContext` attribute, which can either be an\n  // object literal, or a function that returns an object\n  // literal. All methods and attributes from this object\n  // are copies to the object passed in.\n  mixinTemplateContext(target = {}) {\n    const templateContext = _.result(this, 'templateContext');\n    return _.extend(target, templateContext);\n  },\n\n  // Attaches the content of a given view.\n  // This method can be overridden to optimize rendering,\n  // or to render in a non standard way.\n  //\n  // For example, using `innerHTML` instead of `$el.html`\n  //\n  // ```js\n  // attachElContent(html) {\n  //   this.el.innerHTML = html;\n  //   return this;\n  // }\n  // ```\n  attachElContent(html) {\n    this.Dom.setContents(this.el, html, this.$el);\n\n    return this;\n  },\n\n  // called by ViewMixin destroy\n  _removeChildren() {\n    this.removeRegions();\n  },\n\n  _getImmediateChildren() {\n    return _.chain(this._getRegions())\n      .map('currentView')\n      .compact()\n      .value();\n  }\n}, {\n  // Sets the renderer for the Marionette.View class\n  setRenderer(renderer) {\n    this.prototype._renderHtml = renderer;\n    return this;\n  },\n\n  setDomApi\n});\n\n_.extend(View.prototype, ViewMixin, RegionsMixin);\n\nexport default View;\n","// Behavior\n// --------\n\n// A Behavior is an isolated set of DOM /\n// user interactions that can be mixed into any View.\n// Behaviors allow you to blackbox View specific interactions\n// into portable logical chunks, keeping your views simple and your code DRY.\n\nimport _ from 'underscore';\nimport deprecate from './utils/deprecate';\nimport getUniqueEventName from './utils/get-unique-event-name';\nimport MarionetteObject from './object';\nimport DelegateEntityEventsMixin from './mixins/delegate-entity-events';\nimport TriggersMixin from './mixins/triggers';\nimport UIMixin from './mixins/ui';\n\nconst ClassOptions = [\n  'collectionEvents',\n  'events',\n  'modelEvents',\n  'triggers',\n  'ui'\n];\n\nconst Behavior = MarionetteObject.extend({\n  cidPrefix: 'mnb',\n\n  constructor(options, view) {\n    // Setup reference to the view.\n    // this comes in handle when a behavior\n    // wants to directly talk up the chain\n    // to the view.\n    this.view = view;\n\n    if (this.defaults) {\n      deprecate('Behavior defaults are deprecated. For similar functionality set options on the Behavior class.');\n    }\n\n    this.defaults = _.clone(_.result(this, 'defaults', {}));\n\n    this._setOptions(_.extend({}, this.defaults, options));\n    this.mergeOptions(this.options, ClassOptions);\n\n    // Construct an internal UI hash using\n    // the behaviors UI hash and then the view UI hash.\n    // This allows the user to use UI hash elements\n    // defined in the parent view as well as those\n    // defined in the given behavior.\n    // This order will help the reuse and share of a behavior\n    // between multiple views, while letting a view override a\n    // selector under an UI key.\n    this.ui = _.extend({}, _.result(this, 'ui'), _.result(view, 'ui'));\n\n    MarionetteObject.apply(this, arguments);\n  },\n\n  // proxy behavior $ method to the view\n  // this is useful for doing jquery DOM lookups\n  // scoped to behaviors view.\n  $() {\n    return this.view.$.apply(this.view, arguments);\n  },\n\n  // Stops the behavior from listening to events.\n  // Overrides Object#destroy to prevent additional events from being triggered.\n  destroy() {\n    this.stopListening();\n\n    this.view._removeBehavior(this);\n\n    return this;\n  },\n\n  proxyViewProperties() {\n    this.$el = this.view.$el;\n    this.el = this.view.el;\n\n    return this;\n  },\n\n  bindUIElements() {\n    this._bindUIElements();\n\n    return this;\n  },\n\n  unbindUIElements() {\n    this._unbindUIElements();\n\n    return this;\n  },\n\n  getUI(name) {\n    return this._getUI(name);\n  },\n\n  // Handle `modelEvents`, and `collectionEvents` configuration\n  delegateEntityEvents() {\n    this._delegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  undelegateEntityEvents() {\n    this._undelegateEntityEvents(this.view.model, this.view.collection);\n\n    return this;\n  },\n\n  getEvents() {\n    // Normalize behavior events hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorEvents = this.normalizeUIKeys(_.result(this, 'events'));\n\n    // binds the handler to the behavior and builds a unique eventName\n    return _.reduce(behaviorEvents, (events, behaviorHandler, key) => {\n      if (!_.isFunction(behaviorHandler)) {\n        behaviorHandler = this[behaviorHandler];\n      }\n      if (!behaviorHandler) { return; }\n      key = getUniqueEventName(key);\n      events[key] = _.bind(behaviorHandler, this);\n      return events;\n    }, {});\n  },\n\n  // Internal method to build all trigger handlers for a given behavior\n  getTriggers() {\n    if (!this.triggers) { return; }\n\n    // Normalize behavior triggers hash to allow\n    // a user to use the @ui. syntax.\n    const behaviorTriggers = this.normalizeUIKeys(_.result(this, 'triggers'));\n\n    return this._getViewTriggers(this.view, behaviorTriggers);\n  }\n\n});\n\n_.extend(Behavior.prototype, DelegateEntityEventsMixin, TriggersMixin, UIMixin);\n\nexport default Behavior;\n","// DO NOT MODIFY THIS FILE BECAUSE IT WAS GENERATED AUTOMATICALLY\n\nimport Backbone from 'backbone';\nimport {version} from '../package.json';\n\nimport proxy from './utils/proxy';\nimport extend from './utils/extend';\nimport deprecate from './utils/deprecate';\n\nimport isNodeAttached from './common/is-node-attached';\nimport mergeOptions from './common/merge-options';\nimport getOption from './common/get-option';\nimport normalizeMethods from './common/normalize-methods';\nimport monitorViewEvents from './common/monitor-view-events';\n\nimport {\n  bindEvents,\n  unbindEvents\n} from './common/bind-events';\n\nimport {\n  bindRequests,\n  unbindRequests\n} from './common/bind-requests';\n\nimport {\n  triggerMethod,\n  triggerMethodOn\n} from './common/trigger-method';\n\n\nimport MarionetteObject from './object';\nimport TemplateCache from './template-cache';\nimport View from './view';\n// DISABLED[CollectionView]\n//import CollectionView from './collection-view';\n// EXPERIMENTAL[NextCollectionView]\n//import NextCollectionView from './next-collection-view';\n// DEPRECATED[CompositeView]\n//import CompositeView from './composite-view';\nimport Behavior from './behavior';\nimport Region from './region';\n// DISABLED[Application]\n//import Application from './application';\n// DISABLED[AppRouter]\n//import AppRouter from './app-router';\nimport MarionetteError from './error';\n\nimport behaviorsLookup from './config/behaviors-lookup';\nimport DomApi from './config/dom';\nimport Renderer from './config/renderer';\n\nimport {\n  FEATURES,\n  isEnabled,\n  setEnabled\n} from './config/features';\n\nconst previousMarionette = Backbone.Marionette;\nconst Marionette = Backbone.Marionette = {};\n\n// This allows you to run multiple instances of Marionette on the same\n// webapp. After loading the new version, call `noConflict()` to\n// get a reference to it. At the same time the old version will be\n// returned to Backbone.Marionette.\nMarionette.noConflict = function() {\n  Backbone.Marionette = previousMarionette;\n  return this;\n};\n\n// Utilities\nMarionette.bindEvents = proxy(bindEvents);\nMarionette.unbindEvents = proxy(unbindEvents);\nMarionette.bindRequests = proxy(bindRequests);\nMarionette.unbindRequests = proxy(unbindRequests);\nMarionette.mergeOptions = proxy(mergeOptions);\nMarionette.getOption = proxy(getOption);\nMarionette.normalizeMethods = proxy(normalizeMethods);\nMarionette.extend = extend;\nMarionette.isNodeAttached = isNodeAttached;\nMarionette.deprecate = deprecate;\nMarionette.triggerMethod = proxy(triggerMethod);\nMarionette.triggerMethodOn = triggerMethodOn;\nMarionette.isEnabled = isEnabled;\nMarionette.setEnabled = setEnabled;\nMarionette.monitorViewEvents = monitorViewEvents;\n\nMarionette.Behaviors = {};\nMarionette.Behaviors.behaviorsLookup = behaviorsLookup;\n\n// Classes\n// DISABLED[Application]\n//Marionette.Application = Application;\n// DISABLED[AppRouter]\n//Marionette.AppRouter = AppRouter;\nMarionette.Renderer = Renderer;\nMarionette.TemplateCache = TemplateCache;\nMarionette.View = View;\n// DISABLED[CollectionView]\n//Marionette.CollectionView = CollectionView;\n// EXPERIMENTAL[NextCollectionView]\n//Marionette.NextCollectionView = NextCollectionView;\n// DEPRECATED[CompositeView]\n//Marionette.CompositeView = CompositeView;\nMarionette.Behavior = Behavior;\nMarionette.Region = Region;\nMarionette.Error = MarionetteError;\nMarionette.Object = MarionetteObject;\n\n// Configuration\nMarionette.DEV_MODE = false;\nMarionette.FEATURES = FEATURES;\nMarionette.VERSION = version;\nMarionette.DomApi = DomApi;\nMarionette.setDomApi = function(mixin) {\n // DISABLED[CollectionView]\n// CollectionView.setDomApi(mixin);\n // DEPRECATED[CompositeView]\n// CompositeView.setDomApi(mixin);\n // EXPERIMENTAL[NextCollectionView]\n// NextCollectionView.setDomApi(mixin);\n  Region.setDomApi(mixin);\n  View.setDomApi(mixin);\n};\n\nexport default Marionette;\n","import MarionetteError from '../error';\n\n// Placeholder method to be extended by the user.\n// The method should define the object that stores the behaviors.\n// i.e.\n//\n// ```js\n// Marionette.Behaviors.behaviorsLookup: function() {\n//   return App.Behaviors\n// }\n// ```\nexport default function behaviorsLookup() {\n  throw new MarionetteError({\n    message: 'You must define where your behaviors are stored.',\n    url: 'marionette.behaviors.md#behaviorslookup'\n  });\n}\n"]}